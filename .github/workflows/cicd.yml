name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      #Setting JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      #gradlew chmod
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Spring Boot Build
      - name: Spring Boot Build
        run: |
          export ${{ secrets.ENV }}
          ./gradlew clean build -x test

      #------------------- Docker --------------------

      # Docker Image Build
      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} .

      # DockerHub Login
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Hub push
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}

      #------------------- EC2 --------------------

      # Create .env file and upload to EC2
      - name: Create .env file
        run: |
          cat <<EOF > .env
          ${{ secrets.ENV }}
          EOF

      - name: SCP .env file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          source: ".env"
          target: "/home/${{ secrets.EC2_USERNAME }}/secrets"

      # AWS EC2 Server Connect & Docker 명령어 실행
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            # 기존 컨테이너 정리
            CONTAINER_ID=$(sudo docker ps -aq -f name=${{ secrets.DOCKERHUB_IMAGENAME }})
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping and removing existing container..."
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            # 기존 이미지 정리 (선택사항)
            OLD_IMAGE_ID=$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }})
            if [ ! -z "$OLD_IMAGE_ID" ]; then
              echo "Removing old image..."
              sudo docker rmi $OLD_IMAGE_ID
            fi
            
            # 새 이미지 pull
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
            
            # .env 파일 권한 설정
            sudo chmod 600 /home/${{ secrets.EC2_USERNAME }}/secrets/.env
            
            # Docker 컨테이너 실행
            sudo docker run -it -d --network host --name ${{ secrets.DOCKERHUB_IMAGENAME }} \
              -e TZ=Asia/Seoul \
              --env-file /home/${{ secrets.EC2_USERNAME }}/secrets/.env \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
            
            # 보안을 위해 .env 파일 삭제
            sudo rm /home/${{ secrets.EC2_USERNAME }}/secrets/.env
            
            # 실행 확인
            echo "Container started successfully!"
            sudo docker ps | grep ${{ secrets.DOCKERHUB_IMAGENAME }}